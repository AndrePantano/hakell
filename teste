{-# LANGUAGE OverloadedStrings, TypeFamilies, QuasiQuotes,
             TemplateHaskell, GADTs, FlexibleContexts,
             MultiParamTypeClasses, DeriveDataTypeable,
             GeneralizedNewtypeDeriving, ViewPatterns #-}
module Main where
import Database.Persist.Sqlite
    ( ConnectionPool, SqlBackend, runSqlPool, runMigration
    , createSqlitePool, runSqlPersistMPool
    )
import Control.Monad.Logger (runStdoutLoggingT)
import Data.Text (Text)
import qualified Data.Text as T
import Yesod

data Pagina = Pagina{connPool :: ConnectionPool}

instance Yesod Pagina
instance YesodPersist Pagina where
   type YesodPersistBackend Pagina = SqlBackend
   runDB f = do
       master <- getYesod
       let pool = connPool master
       runSqlPool f pool

share [mkPersist sqlSettings, mkMigrate "migrateAll"] [persistLowerCase|
Pessoa
   nome Text
|]

mkYesod "Pagina" [parseRoutes|
  / HomeR GET
  /creditos CreditosR GET
  /insert NovoR GET
  /insert/#Text InsertR GET
  /listar ListarR GET
|]

wHead :: String -> Widget
wHead title = toWidgetHead [hamlet|

    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="https://code.jquery.com/jquery-2.1.4.min.js" crossorigin="anonymous">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css" integrity="sha512-dTfge/zgoMYpP7QbHy4gWMEGsbsdZeCXz7irItjcC3sPUFtf0kuFbDz/ixG7ArTxmDjLXDmezHubeNikyKGVyQ==" crossorigin="anonymous">    
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js" integrity="sha512-K1qjQ+NcF2TYO/eI3M6v8EiNYZfA95pQumfvcVrTHtwQVDG+aHRqLi/ETn2uB+1JqwYqVG3LIvdm9lj6imS/pQ==" crossorigin="anonymous">
    <title>#{title}
|]

wNav :: Widget
wNav = [whamlet|
    <nav class="navbar navbar-inverse">
        <div class="container-fluid">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
                    <span class="sr-only">Toggle navigation
                    <span class="icon-bar">
                    <span class="icon-bar">
                    <span class="icon-bar">
                <a class="navbar-brand" href=@{HomeR}>Início
            <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
                <ul class="nav navbar-nav">
                    <li>
                        <a href=@{HomeR}>
                           <span class="glyphicon glyphicon-download-alt">
                           Inserir Nomes
                    <li>
                        <a href=@{HomeR}>
                           <span class="glyphicon glyphicon-list-alt">
                           Lista de Nomes
                <ul class="nav navbar-nav navbar-right">
                    <li>
                        <a href=@{CreditosR}>
                           <span class="glyphicon glyphicon-user">
                           Créditos
|]

wContainer :: String -> Widget -> Widget
wContainer title content = do
    wHead title
    [whamlet|
    <div class="container">
         ^{wNav}
         ^{content}
|]

wHome :: Widget
wHome = [whamlet|
    <div class="row">
        <div class="col-sm-12">
            <div class="jumbotron">
              <h1>Olá, Seja Bem Vindo!
              <p>Este é o nosso primeiro site feito em Haskell.
|]

wCreditos :: Widget
wCreditos = do
    [whamlet|
        <div class="row">
            <div class="col-sm-12">
                <div class="col-sm-12 page-header">
                    <h1>
                        <span class="glyphicon glyphicon-user">
                        Créditos
        <div class="row">
            <div class="col-sm-6">
                <div class="table-responsive">
                    <table class="table">
                      <thead>
                        <tr>
                          <th>Alunos
                          <th>Matrícula
                      <tbody>
                        <tr>
                          <td>André Silva Santos
                          <td>1310002-1
                        <tr>
                          <td>Leonardo Machado
                          <td>1310066-7
    |]

wNovo :: Widget
wNovo = [whamlet|
    <div class="row">
      <div class="col-sm-12 page-header">
        <h1>
          <span class="glyphicon glyphicon-download-alt">Inserir Nomes
      <div class="col-sm-4">
        <form class="form-vertical" id="form" method="GET" action="#">
          <div class="form-group">
            <label>Nome:
            <input type="text" class="form-control" id="texto" placeholder="Novo nome">
          <button type="button" class="btn btn-primary" id="btn-enviar">Enviar
    |]
    toWidgetHead [julius|
        $(document).ready(function(){
            $("#btn-enviar").click(function(){
                var texto = $("#texto").val();
                if(texto.length > 0){
                    window.location.href = "/insert/"+texto;
                }else{
                    alert("Informe o texto corretamente!");
                }
            });
        });
    |]

wInsert::Text -> Widget
wInsert t = do
    runDB $ insert (Pessoa t)
    defaultLayout $ do
      [whamlet|
        <div class="row">
          <div class="col-sm-12 page-header">
            <h1>
              <span class="glyphicon glyphicon-download-alt">Inserir Nomes
          <div class="col-sm-4">
            <div class="alert alert-success">
              <h1>#{show t}
              <p>Inserido com sucesso!
            <a class="btn btn-primary" href=@{NovoR} role="button">Adicionar Outro
      |]

wLista :: Widget
wLista = do $
    pessoas <- runDB $ selectList [] [Desc PessoaNome]
        defaultLayout $ do
          [whamlet|
            <div class="row">
              <div class="col-sm-12">
                <div class="col-sm-12 page-header">
                  <h1>
                    <span class="glyphicon glyphicon-list-alt">Lista de Nomes
            <div class="row">
              <div class="col-sm-12">
                $if null pessoas
                  <div class="jumbotron">
                    <h1>Sem nomes!
                    <p>Se quiser cadastrar nomes clique no botão abaixo.
                    <p>
                      <a class="btn btn-primary" href=@{NovoR} role="button">Cadastrar Nomes
                $else
                  <div class="table-responsive">
                    <table class="table">
                      <thead>
                        <tr>
                          <th>Nomes Cadastrados
                      <tbody>
                        $forall Entity pessoaId pessoa <- pessoas
                          <tr>
                            <td>#{pessoaNome pessoa}
          |]


getHomeR :: Handler Html
getHomeR = defaultLayout $ do (wContainer "Home" wHome)

getCreditosR :: Handler Html
getCreditosR = defaultLayout $ do (wContainer "Créditos" wCreditos)

getNovoR::Handler Html
getNovoR = defaultLayout $ do (wContainer "Inserir Nomes" wNovo)

getInsertR :: Text -> Handler Html
getInsertR t = defaultLayout $ do (wContainer "Inserir Nomes" (wInsert t))

getListarR :: Handler Html
getListarR = defaultLayout $ do (wContainer "Lista de Nomes" wLista)

main :: IO ()
main = do
      pool <- runStdoutLoggingT $ createSqlitePool "nome.db3" 10 -- create a new pool
      runSqlPersistMPool (runMigration migrateAll) pool
      warp 8080 $ Pagina pool

